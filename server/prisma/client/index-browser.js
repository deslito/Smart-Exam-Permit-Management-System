
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StudentScalarFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  otherNames: 'otherNames',
  lastName: 'lastName',
  studentNo: 'studentNo',
  regNo: 'regNo',
  gender: 'gender',
  studyYear: 'studyYear',
  campus: 'campus',
  academicYear: 'academicYear',
  currentSemester: 'currentSemester',
  picture: 'picture',
  paymentStatus: 'paymentStatus',
  permitStatus: 'permitStatus',
  programmeId: 'programmeId'
};

exports.Prisma.InvigilatorScalarFieldEnum = {
  id: 'id',
  invigilatorNumber: 'invigilatorNumber',
  title: 'title',
  firstName: 'firstName',
  otherNames: 'otherNames',
  lastName: 'lastName',
  picture: 'picture',
  currentSemester: 'currentSemester',
  departmentId: 'departmentId'
};

exports.Prisma.AdminScalarFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  otherNames: 'otherNames',
  lastName: 'lastName',
  picture: 'picture',
  facultyOrSchoolId: 'facultyOrSchoolId'
};

exports.Prisma.CourseUnitScalarFieldEnum = {
  id: 'id',
  code: 'code',
  title: 'title',
  credits: 'credits',
  year: 'year',
  semester: 'semester',
  category: 'category',
  courseName: 'courseName'
};

exports.Prisma.EnrolledCourseUnitScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  courseUnitId: 'courseUnitId',
  attempt: 'attempt',
  year: 'year',
  semester: 'semester',
  isInvigilatorApproved: 'isInvigilatorApproved',
  invigilatorApprovedAt: 'invigilatorApprovedAt',
  approvedBy: 'approvedBy'
};

exports.Prisma.ExamScalarFieldEnum = {
  id: 'id',
  courseUnitId: 'courseUnitId',
  examDate: 'examDate',
  startTime: 'startTime',
  endTime: 'endTime',
  venue: 'venue',
  isApproved: 'isApproved',
  approvedAt: 'approvedAt'
};

exports.Prisma.ExamAssignmentScalarFieldEnum = {
  id: 'id',
  invigilatorId: 'invigilatorId',
  examId: 'examId'
};

exports.Prisma.StudentQrCodeScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  qrCode: 'qrCode',
  semester: 'semester',
  issuedAt: 'issuedAt',
  expiresAt: 'expiresAt',
  isActive: 'isActive'
};

exports.Prisma.ProgrammeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  programme: 'programme',
  courseId: 'courseId'
};

exports.Prisma.FacultyOrSchoolScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.DepartmentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  facultyOrSchoolId: 'facultyOrSchoolId'
};

exports.Prisma.CourseScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  code: 'code',
  departmentId: 'departmentId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Role = exports.$Enums.Role = {
  STUDENT: 'STUDENT',
  INVIGILATOR: 'INVIGILATOR',
  ADMIN: 'ADMIN'
};

exports.Gender = exports.$Enums.Gender = {
  MALE: 'MALE',
  FEMALE: 'FEMALE'
};

exports.Semester = exports.$Enums.Semester = {
  ONE: 'ONE',
  TWO: 'TWO'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  paid: 'paid',
  pending: 'pending'
};

exports.PermitStatus = exports.$Enums.PermitStatus = {
  valid: 'valid',
  invalid: 'invalid'
};

exports.CourseCategory = exports.$Enums.CourseCategory = {
  CORE: 'CORE',
  ELECTIVE: 'ELECTIVE'
};

exports.StudyMode = exports.$Enums.StudyMode = {
  DAY: 'DAY',
  EVENING: 'EVENING'
};

exports.CourseType = exports.$Enums.CourseType = {
  Bachelor: 'Bachelor',
  Diploma: 'Diploma',
  Master: 'Master',
  Phd: 'Phd'
};

exports.Prisma.ModelName = {
  User: 'User',
  Student: 'Student',
  Invigilator: 'Invigilator',
  Admin: 'Admin',
  CourseUnit: 'CourseUnit',
  EnrolledCourseUnit: 'EnrolledCourseUnit',
  Exam: 'Exam',
  ExamAssignment: 'ExamAssignment',
  StudentQrCode: 'StudentQrCode',
  Programme: 'Programme',
  FacultyOrSchool: 'FacultyOrSchool',
  Department: 'Department',
  Course: 'Course'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
